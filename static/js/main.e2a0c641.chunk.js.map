{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","checked","setChecked","geoActive","setGeoActive","error","latitude","longitude","geoPosition","setGeoPosition","finalized","setFinalized","geoConfig","enableHighAccurecy","timeout","maxiumAge","geoSuccess","position","coords","geoError","className","Message","showIcon","type","title","description","src","alt","Checkbox","onChange","value_","checked_","event_","Button","onClick","navigator","geolocation","getCurrentPosition","console","log","Alert","warning","appearance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OA+FeA,MA1Ff,WAAgB,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGsBJ,mBAAS,CAC5CK,OAAO,EACPC,SAAU,EACVC,UAAW,IANE,mBAGTC,EAHS,KAGIC,EAHJ,OAQkBT,oBAAS,GAR3B,mBAQTU,EARS,KAQEC,EARF,KAUVC,EAAY,CACfC,oBAAoB,EACpBC,QAAS,IACTC,UAAW,GAONC,EAAa,SAACC,GACnB,IAAIX,EAAYW,EAASC,OAAOZ,SAC5BC,EAAYU,EAASC,OAAOX,UAEhCE,EAAe,CACdJ,OAAO,EACPC,WACAC,cAGDI,GAAa,IAGRQ,EAAW,WAChBV,EAAe,CACdJ,OAAO,EACPC,SAAU,EACVC,UAAW,IAEZI,GAAa,IAiBd,OACC,sBAAKS,UAAU,MAAf,UACC,cAACC,EAAA,EAAD,CACAC,UAAQ,EACRC,KAAK,OACLC,MAAM,OACNC,YAAY,YAIVtB,EAA4G,KAAhG,cAACkB,EAAA,EAAD,CAASC,UAAQ,EAACC,KAAK,QAAQE,YAAY,qDAIxDf,EAAY,cAACW,EAAA,EAAD,CAASC,UAAQ,EAACC,KAAK,UAAUE,YAAY,yCAAyC,KAIlGjB,EAAYH,MAAQ,cAACgB,EAAA,EAAD,CAASC,UAAQ,EAACC,KAAK,QAAQE,YAAY,gDAAgD,KAGhH,iCACC,qBAAKC,IAAI,iDAAiDC,IAAI,gBAG/D,cAACC,EAAA,EAAD,CAAUC,SAjEc,SAACC,EAAQC,EAAUC,GAC5C9B,EAAW6B,IAgEV,uDAEA,iCACC,cAACE,EAAA,EAAD,CAAQC,QA1CS,WACfjC,EACCkC,UAAUC,aACbD,UAAUC,YAAYC,mBAAmBrB,EAAYG,EAAUP,GAE1DJ,EAAYH,OAChBiC,QAAQC,IAAI/B,IAGPJ,GAAa,GAEdoC,IAAMC,QAAQ,uBA+BWC,WAAW,UAAzC,0BC7EWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e2a0c641.chunk.js","sourcesContent":["import 'rsuite/dist/styles/rsuite-default.min.css';\nimport './index.css';\nimport { Message, Checkbox, Button, Alert } from 'rsuite';\nimport { useState } from 'react';\n\nfunction App() {\n\tlet [checked, setChecked] = useState(false);\n\tlet [geoActive, setGeoActive] = useState(true);\n\tlet [geoPosition, setGeoPosition] = useState({\n\t\terror: false,\n\t\tlatitude: 0,\n\t\tlongitude: 0\n\t});\n\tlet [finalized, setFinalized] = useState(false);\n\n\tlet geoConfig = {\n\t\tenableHighAccurecy: true,\n\t\ttimeout: 1000,\n\t\tmaxiumAge: 0\n\t};\n\n\tconst handleChangeCheck = (value_, checked_, event_) =>{\n\t\tsetChecked(checked_);\n\t};\n\n\tconst geoSuccess = (position) =>{\n\t\tlet latitude  = position.coords.latitude;\n\t\tlet longitude = position.coords.longitude;\n\t\t\n\t\tsetGeoPosition({\n\t\t\terror: false,\n\t\t\tlatitude,\n\t\t\tlongitude\n\t\t});\n\n\t\tsetFinalized(true);\n\t};\n\n\tconst geoError = () =>{\n\t\tsetGeoPosition({ \n\t\t\terror: true,\n\t\t\tlatitude: 0,\n\t\t\tlongitude: 0\n\t\t});\n\t\tsetFinalized(false);\n\t};\n\n\tconst handleCheck = () => {\n\t\tif (checked) {\n\t\t\tif (navigator.geolocation) {\n\t\t\t\tnavigator.geolocation.getCurrentPosition(geoSuccess, geoError, geoConfig);\n\n\t\t\t\tif (!geoPosition.error) {\n\t\t\t\t\tconsole.log(geoPosition)\n\t\t\t\t}\n\n\t\t\t} else setGeoActive(false);\n\n\t\t} else Alert.warning('Seleccione aceptar');\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Message\n\t\t\tshowIcon\n\t\t\ttype=\"info\"\n\t\t\ttitle=\"INSP\"\n\t\t\tdescription=\"Mensaje\"\n\t\t\t/>\n\n\t\t\t{\n\t\t\t\t!geoActive ? <Message showIcon type=\"error\" description=\"Geolocalizaci贸n no soportada por el navegador\" /> : null\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tfinalized ? <Message showIcon type=\"success\" description=\"Informaci贸n enviada correctamente\" /> : null\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tgeoPosition.error ? <Message showIcon type=\"error\" description=\"Error al intentar acceder a la ubicaci贸n\" /> : null\n\t\t\t}\n\n\t\t\t<center>\n\t\t\t\t<img src=\"https://encuestas.insp.mx/images/logo_insp.png\" alt=\"Logo INSP\"/>\n\t\t\t</center>\n\n\t\t\t<Checkbox onChange={handleChangeCheck}>Acepto enviar este tipo de informaci贸n</Checkbox>\n\n\t\t\t<center>\n\t\t\t\t<Button onClick={handleCheck} appearance=\"primary\">Enviar</Button>\n\t\t\t</center>\n\t\t</div>\n\t);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}